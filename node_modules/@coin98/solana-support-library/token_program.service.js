"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenProgramService = void 0;
var web3_js_1 = require("@solana/web3.js");
var bn_js_1 = __importDefault(require("bn.js"));
var core_1 = require("./core");
var solana_service_1 = require("./core/solana.service");
var solana_web3_service_1 = require("./core/solana_web3.service");
var token_program_instruction_service_1 = require("./token_program_instruction.service");
var TokenProgramService = /** @class */ (function () {
    function TokenProgramService() {
    }
    TokenProgramService.approve = function (connection, payerAccount, ownerAccount, userTokenAddress, delegateAddress, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, approveInstruction, signers, txSign;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transaction = new web3_js_1.Transaction();
                        approveInstruction = token_program_instruction_service_1.TokenProgramInstructionService.approve(ownerAccount.publicKey, userTokenAddress, delegateAddress, amount);
                        transaction.add(approveInstruction);
                        transaction.feePayer = payerAccount.publicKey;
                        signers = (0, solana_web3_service_1.distinctSigners)([
                            payerAccount,
                            ownerAccount,
                        ]);
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, signers)];
                    case 1:
                        txSign = _a.sent();
                        console.log("Delegated ".concat(amount, " token units to ").concat(delegateAddress.toBase58()), '---', txSign, '\n');
                        return [2 /*return*/, true];
                }
            });
        });
    };
    TokenProgramService.checkAddressType = function (connection, address) {
        return __awaiter(this, void 0, void 0, function () {
            var accountInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, connection.getAccountInfo(address)];
                    case 1:
                        accountInfo = _a.sent();
                        if (!accountInfo) {
                            return [2 /*return*/, 0];
                        }
                        if (accountInfo.owner.toBase58() === web3_js_1.SystemProgram.programId.toBase58()) {
                            return [2 /*return*/, 1];
                        }
                        if (accountInfo.owner.toBase58() === token_program_instruction_service_1.TOKEN_PROGRAM_ID.toBase58()) {
                            return [2 /*return*/, 2];
                        }
                        return [2 /*return*/, 255];
                }
            });
        });
    };
    TokenProgramService.changeAuthority = function (connection, payerAccount, authorityAccount, mintAddress, authorityType, newAuthorityAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, changeAuthorityInstruction, signers, txSign;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transaction = new web3_js_1.Transaction();
                        changeAuthorityInstruction = token_program_instruction_service_1.TokenProgramInstructionService.changeAuthority(authorityAccount.publicKey, mintAddress, authorityType, newAuthorityAddress);
                        transaction.add(changeAuthorityInstruction);
                        signers = (0, solana_web3_service_1.distinctSigners)([
                            payerAccount,
                            authorityAccount,
                        ]);
                        transaction.feePayer = payerAccount.publicKey;
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, signers)];
                    case 1:
                        txSign = _a.sent();
                        console.info("Changed authority of ".concat(mintAddress.toBase58(), " to ").concat(newAuthorityAddress ? newAuthorityAddress.toBase58() : 'NULL'), '---', txSign, '\n');
                        return [2 /*return*/, true];
                }
            });
        });
    };
    TokenProgramService.createTokenAccount = function (connection, payerAccount, tokenAccount, ownerAddress, tokenMintAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, lamportsToInitializeAccount, createAccountInstruction, initializeTokenAccountInstruction, signers, txSign;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transaction = new web3_js_1.Transaction();
                        return [4 /*yield*/, connection.getMinimumBalanceForRentExemption(token_program_instruction_service_1.INITIALIZE_ACCOUNT_SPAN)];
                    case 1:
                        lamportsToInitializeAccount = _a.sent();
                        createAccountInstruction = web3_js_1.SystemProgram.createAccount({
                            fromPubkey: payerAccount.publicKey,
                            newAccountPubkey: tokenAccount.publicKey,
                            lamports: lamportsToInitializeAccount,
                            space: token_program_instruction_service_1.INITIALIZE_ACCOUNT_SPAN,
                            programId: token_program_instruction_service_1.TOKEN_PROGRAM_ID,
                        });
                        transaction.add(createAccountInstruction);
                        initializeTokenAccountInstruction = token_program_instruction_service_1.TokenProgramInstructionService.initializeAccount(ownerAddress, tokenMintAddress, tokenAccount.publicKey);
                        transaction.add(initializeTokenAccountInstruction);
                        transaction.feePayer = payerAccount.publicKey;
                        signers = [
                            payerAccount,
                            tokenAccount,
                        ];
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, signers)];
                    case 2:
                        txSign = _a.sent();
                        console.info("Created Token Account ".concat(tokenAccount.publicKey.toBase58()), '---', txSign, '\n');
                        return [2 /*return*/, tokenAccount];
                }
            });
        });
    };
    TokenProgramService.createTokenMint = function (connection, payerAccount, tokenMintAccount, decimals, mintAuthorityAddress, freezeAuthorityAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, lamportsToInitializeMint, createAccountInstruction, initializeTokenMintInstruction, signers, txSign;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, solana_service_1.SolanaService.isAddressInUse(connection, tokenMintAccount.publicKey)];
                    case 1:
                        if (_a.sent()) {
                            console.info("SKIPPED: Token Mint ".concat(tokenMintAccount.publicKey.toBase58(), " is already existed"), '\n');
                            return [2 /*return*/, tokenMintAccount];
                        }
                        transaction = new web3_js_1.Transaction();
                        return [4 /*yield*/, connection.getMinimumBalanceForRentExemption(token_program_instruction_service_1.INITIALIZE_MINT_SPAN)];
                    case 2:
                        lamportsToInitializeMint = _a.sent();
                        createAccountInstruction = web3_js_1.SystemProgram.createAccount({
                            fromPubkey: payerAccount.publicKey,
                            newAccountPubkey: tokenMintAccount.publicKey,
                            lamports: lamportsToInitializeMint,
                            space: token_program_instruction_service_1.INITIALIZE_MINT_SPAN,
                            programId: token_program_instruction_service_1.TOKEN_PROGRAM_ID,
                        });
                        transaction.add(createAccountInstruction);
                        initializeTokenMintInstruction = token_program_instruction_service_1.TokenProgramInstructionService.initializeMint(tokenMintAccount.publicKey, decimals, mintAuthorityAddress, freezeAuthorityAddress);
                        transaction.add(initializeTokenMintInstruction);
                        signers = [
                            payerAccount,
                            tokenMintAccount,
                        ];
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, signers)];
                    case 3:
                        txSign = _a.sent();
                        console.info("Created Token Mint ".concat(tokenMintAccount.publicKey.toBase58()), '---', txSign, '\n');
                        return [2 /*return*/, tokenMintAccount];
                }
            });
        });
    };
    TokenProgramService.createNonFungibleTokenMint = function (connection, payerAccount, tokenMintAccount, initialOwnerAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, lamportsToInitializeMint, createAccountInstruction, initializeTokenMintInstruction, initialOwnerTokenAddress, createATAInstruction, mintInstruction, disableMintAuthorityInstruction, signers, txSign;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, solana_service_1.SolanaService.isAddressInUse(connection, tokenMintAccount.publicKey)];
                    case 1:
                        if (_a.sent()) {
                            console.info("SKIPPED: Token Mint ".concat(tokenMintAccount.publicKey.toBase58(), " is already existed"), '\n');
                            return [2 /*return*/, tokenMintAccount];
                        }
                        transaction = new web3_js_1.Transaction();
                        return [4 /*yield*/, connection.getMinimumBalanceForRentExemption(token_program_instruction_service_1.INITIALIZE_MINT_SPAN)];
                    case 2:
                        lamportsToInitializeMint = _a.sent();
                        createAccountInstruction = web3_js_1.SystemProgram.createAccount({
                            fromPubkey: payerAccount.publicKey,
                            newAccountPubkey: tokenMintAccount.publicKey,
                            lamports: lamportsToInitializeMint,
                            space: token_program_instruction_service_1.INITIALIZE_MINT_SPAN,
                            programId: token_program_instruction_service_1.TOKEN_PROGRAM_ID,
                        });
                        transaction.add(createAccountInstruction);
                        initializeTokenMintInstruction = token_program_instruction_service_1.TokenProgramInstructionService.initializeMint(tokenMintAccount.publicKey, 0, payerAccount.publicKey, null);
                        transaction.add(initializeTokenMintInstruction);
                        initialOwnerTokenAddress = this.findAssociatedTokenAddress(initialOwnerAddress, tokenMintAccount.publicKey);
                        createATAInstruction = token_program_instruction_service_1.TokenProgramInstructionService.createAssociatedTokenAccount(payerAccount.publicKey, initialOwnerAddress, tokenMintAccount.publicKey);
                        transaction.add(createATAInstruction);
                        mintInstruction = token_program_instruction_service_1.TokenProgramInstructionService.mint(payerAccount.publicKey, tokenMintAccount.publicKey, initialOwnerTokenAddress, new bn_js_1.default(1));
                        transaction.add(mintInstruction);
                        disableMintAuthorityInstruction = token_program_instruction_service_1.TokenProgramInstructionService.changeAuthority(payerAccount.publicKey, tokenMintAccount.publicKey, 0, null);
                        transaction.add(disableMintAuthorityInstruction);
                        signers = [
                            payerAccount,
                            tokenMintAccount,
                        ];
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, signers)];
                    case 3:
                        txSign = _a.sent();
                        console.info("Created Token Mint ".concat(tokenMintAccount.publicKey.toBase58()), '---', txSign, '\n');
                        return [2 /*return*/, tokenMintAccount];
                }
            });
        });
    };
    TokenProgramService.createAssociatedTokenAccount = function (connection, payerAccount, ownerAddress, tokenMintAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, createATAInstruction, signers, txSign, tokenAccountAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transaction = new web3_js_1.Transaction();
                        createATAInstruction = token_program_instruction_service_1.TokenProgramInstructionService.createAssociatedTokenAccount(payerAccount.publicKey, ownerAddress, tokenMintAddress);
                        transaction.add(createATAInstruction);
                        signers = [
                            payerAccount,
                        ];
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, signers)];
                    case 1:
                        txSign = _a.sent();
                        tokenAccountAddress = this.findAssociatedTokenAddress(ownerAddress, tokenMintAddress);
                        console.log("Created Associated Token Account ".concat(tokenAccountAddress.toBase58(), " for Account ").concat(ownerAddress.toBase58()), '---', txSign, '\n');
                        return [2 /*return*/, tokenAccountAddress];
                }
            });
        });
    };
    TokenProgramService.createAssociatedTokenAccountIfNotExists = function (connection, payerAccount, ownerAddress, tokenMintAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenAccountAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenAccountAddress = this.findAssociatedTokenAddress(ownerAddress, tokenMintAddress);
                        return [4 /*yield*/, solana_service_1.SolanaService.isAddressInUse(connection, tokenAccountAddress)];
                    case 1:
                        if (_a.sent()) {
                            console.log("SKIPPED: Associated Token Account ".concat(tokenAccountAddress.toBase58(), " of Account ").concat(ownerAddress.toBase58(), " is already existed"), '\n');
                            return [2 /*return*/, tokenAccountAddress];
                        }
                        return [2 /*return*/, this.createAssociatedTokenAccount(connection, payerAccount, ownerAddress, tokenAccountAddress)];
                }
            });
        });
    };
    TokenProgramService.findAssociatedTokenAddress = function (walletAddress, tokenMintAddress) {
        return token_program_instruction_service_1.TokenProgramInstructionService.findAssociatedTokenAddress(walletAddress, tokenMintAddress);
    };
    TokenProgramService.findRecipientTokenAddress = function (connection, payerAddress, recipientAddress, tokenMintAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var recipientTokenAddress, createATAInstruction, recepientType, associatedTokenAccountAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        recipientTokenAddress = recipientAddress;
                        createATAInstruction = null;
                        return [4 /*yield*/, this.checkAddressType(connection, recipientAddress)];
                    case 1:
                        recepientType = _a.sent();
                        if (!(recepientType === 0 || recepientType === 1)) return [3 /*break*/, 3];
                        associatedTokenAccountAddress = this.findAssociatedTokenAddress(recipientAddress, tokenMintAddress);
                        return [4 /*yield*/, solana_service_1.SolanaService.isAddressAvailable(connection, associatedTokenAccountAddress)];
                    case 2:
                        if (_a.sent()) {
                            createATAInstruction = token_program_instruction_service_1.TokenProgramInstructionService.createAssociatedTokenAccount(payerAddress, recipientAddress, tokenMintAddress);
                        }
                        recipientTokenAddress = associatedTokenAccountAddress;
                        _a.label = 3;
                    case 3: return [2 /*return*/, [recipientTokenAddress, createATAInstruction]];
                }
            });
        });
    };
    TokenProgramService.getTokenAccountInfo = function (connection, address) {
        return __awaiter(this, void 0, void 0, function () {
            var accountInfo, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, connection.getAccountInfo(address)];
                    case 1:
                        accountInfo = _a.sent();
                        data = token_program_instruction_service_1.TokenProgramInstructionService.decodeTokenAccountInfo(accountInfo.data);
                        data.address = address;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    TokenProgramService.getTokenMintInfo = function (connection, address) {
        return __awaiter(this, void 0, void 0, function () {
            var accountInfo, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, connection.getAccountInfo(address)];
                    case 1:
                        accountInfo = _a.sent();
                        data = token_program_instruction_service_1.TokenProgramInstructionService.decodeTokenMintInfo(accountInfo.data);
                        data.address = address;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    TokenProgramService.migrateSplTokenAccounts = function (connection, payerAccount, userAccount) {
        return __awaiter(this, void 0, void 0, function () {
            var userTokenAccountsResult, instructions, tokenAccountInfos, tokenMintAddresses, _loop_1, this_1, i, transaction, txSign;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, connection.getTokenAccountsByOwner(userAccount.publicKey, {
                            programId: token_program_instruction_service_1.TOKEN_PROGRAM_ID,
                        })];
                    case 1:
                        userTokenAccountsResult = _a.sent();
                        instructions = [];
                        tokenAccountInfos = userTokenAccountsResult.value.map(function (tokenAccount) {
                            var result = token_program_instruction_service_1.TokenProgramInstructionService.decodeTokenAccountInfo(tokenAccount.account.data);
                            result.address = tokenAccount.pubkey;
                            return result;
                        });
                        tokenMintAddresses = tokenAccountInfos.map(function (account) { return account.mint; })
                            .filter(function (value, index, self) {
                            return self.findIndex(function (subValue) { return subValue.toBase58() === value.toBase58(); }) === index;
                        });
                        _loop_1 = function (i) {
                            var tokenMintAddress = tokenMintAddresses[i];
                            var filteredTokenAccountInfos = tokenAccountInfos.filter(function (accountInfo) { return accountInfo.mint.toBase58() === tokenMintAddress.toBase58(); });
                            var associatedTokenAccountAddress = this_1.findAssociatedTokenAddress(userAccount.publicKey, tokenMintAddress);
                            if (!filteredTokenAccountInfos.some(function (accountInfo) { return accountInfo.address.toBase58() === associatedTokenAccountAddress.toBase58(); })) {
                                var createATAInstruction = token_program_instruction_service_1.TokenProgramInstructionService.createAssociatedTokenAccount(payerAccount.publicKey, userAccount.publicKey, tokenMintAddress);
                                instructions.push(createATAInstruction);
                            }
                            for (var j = 0; j < filteredTokenAccountInfos.length; j++) {
                                var tokenAccountInfo = filteredTokenAccountInfos[j];
                                if (tokenAccountInfo.address.toBase58() !== associatedTokenAccountAddress.toBase58()) {
                                    if (tokenAccountInfo.amount.gt(new bn_js_1.default(0))) {
                                        var transferTokenInstruction = token_program_instruction_service_1.TokenProgramInstructionService.transfer(userAccount.publicKey, tokenAccountInfo.address, associatedTokenAccountAddress, tokenAccountInfo.amount);
                                        instructions.push(transferTokenInstruction);
                                    }
                                    var closeTokenAccountInstruction = token_program_instruction_service_1.TokenProgramInstructionService.closeAccount(userAccount.publicKey, tokenAccountInfo.address);
                                    instructions.push(closeTokenAccountInstruction);
                                }
                            }
                        };
                        this_1 = this;
                        for (i = 0; i < tokenMintAddresses.length; i++) {
                            _loop_1(i);
                        }
                        if (!(instructions.length > 0)) return [3 /*break*/, 3];
                        transaction = new web3_js_1.Transaction();
                        transaction.instructions = instructions;
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, [
                                payerAccount,
                                userAccount,
                            ])];
                    case 2:
                        txSign = _a.sent();
                        console.info("Migrated SPL-Token accounts for ".concat(userAccount.publicKey.toBase58()), '---', txSign, '\n');
                        return [2 /*return*/, true];
                    case 3:
                        console.info('Migrated SPL-Token: Nothing to do', '\n');
                        return [2 /*return*/, false];
                }
            });
        });
    };
    TokenProgramService.mint = function (connection, payerAccount, authorityAccount, tokenMintAddress, recipientAddress, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, _a, recipientTokenAddress, createATAInstruction, mintInstruction, signers, txSign;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        transaction = new web3_js_1.Transaction();
                        return [4 /*yield*/, this.findRecipientTokenAddress(connection, payerAccount.publicKey, recipientAddress, tokenMintAddress)];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), recipientTokenAddress = _a[0], createATAInstruction = _a[1];
                        if (createATAInstruction) {
                            transaction.add(createATAInstruction);
                        }
                        mintInstruction = token_program_instruction_service_1.TokenProgramInstructionService.mint(authorityAccount.publicKey, tokenMintAddress, recipientTokenAddress, amount);
                        transaction.add(mintInstruction);
                        signers = (0, solana_web3_service_1.distinctSigners)([
                            payerAccount,
                            authorityAccount,
                        ]);
                        transaction.feePayer = payerAccount.publicKey;
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, signers)];
                    case 2:
                        txSign = _b.sent();
                        console.log("Minted ".concat(amount, " token units to ").concat(recipientTokenAddress.toBase58()), '---', txSign, '\n');
                        return [2 /*return*/, true];
                }
            });
        });
    };
    TokenProgramService.transfer = function (connection, payerAccount, ownerAccount, userTokenAddress, recipientAddress, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, payerTokenAccountInfo, _a, recipientTokenAddress, createATAInstruction, transferTokenInstruction, signers, txSign;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        transaction = new web3_js_1.Transaction();
                        return [4 /*yield*/, this.getTokenAccountInfo(connection, userTokenAddress)];
                    case 1:
                        payerTokenAccountInfo = _b.sent();
                        return [4 /*yield*/, this.findRecipientTokenAddress(connection, payerAccount.publicKey, recipientAddress, payerTokenAccountInfo.mint)];
                    case 2:
                        _a = __read.apply(void 0, [_b.sent(), 2]), recipientTokenAddress = _a[0], createATAInstruction = _a[1];
                        if (createATAInstruction) {
                            transaction.add(createATAInstruction);
                        }
                        transferTokenInstruction = token_program_instruction_service_1.TokenProgramInstructionService.transfer(ownerAccount.publicKey, userTokenAddress, recipientTokenAddress, amount);
                        transaction.add(transferTokenInstruction);
                        signers = (0, solana_web3_service_1.distinctSigners)([
                            payerAccount,
                            ownerAccount,
                        ]);
                        transaction.feePayer = payerAccount.publicKey;
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, signers)];
                    case 3:
                        txSign = _b.sent();
                        console.log("Transferred ".concat(amount, " token units from ").concat(userTokenAddress.toBase58(), " to ").concat(recipientTokenAddress.toBase58()), '---', txSign, '\n');
                        return [2 /*return*/, true];
                }
            });
        });
    };
    TokenProgramService.freezeAccount = function (connection, authorityAccount, accountAddress, mintAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, freezeAccountInstruction, txSign;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transaction = new web3_js_1.Transaction();
                        freezeAccountInstruction = token_program_instruction_service_1.TokenProgramInstructionService.freezeAccount(accountAddress, mintAddress, authorityAccount.publicKey);
                        transaction.add(freezeAccountInstruction);
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, [
                                authorityAccount
                            ])];
                    case 1:
                        txSign = _a.sent();
                        console.log("Freeze account ".concat(accountAddress.toString()), '---', txSign, '\n');
                        return [2 /*return*/, true];
                }
            });
        });
    };
    TokenProgramService.thawAccount = function (connection, payerAccount, authorityAccount, accountAddress, mintAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, thawAccountInstruction, signers, txSign;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transaction = new web3_js_1.Transaction();
                        thawAccountInstruction = token_program_instruction_service_1.TokenProgramInstructionService.thawAccount(accountAddress, mintAddress, authorityAccount.publicKey);
                        transaction.add(thawAccountInstruction);
                        transaction.feePayer = payerAccount.publicKey;
                        signers = (0, solana_web3_service_1.distinctSigners)([
                            payerAccount,
                            authorityAccount
                        ]);
                        transaction.feePayer = payerAccount.publicKey;
                        return [4 /*yield*/, (0, core_1.sendTransaction)(connection, transaction, signers)];
                    case 1:
                        txSign = _a.sent();
                        console.log("Thaw account ".concat(accountAddress.toString()), '---', txSign, '\n');
                        return [2 /*return*/, true];
                }
            });
        });
    };
    return TokenProgramService;
}());
exports.TokenProgramService = TokenProgramService;
