"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogMessageProcessor = void 0;
var web3_js_1 = require("@solana/web3.js");
var interfaces_1 = require("./interfaces");
var ANCHOR_PROGRAM_ERROR = 'Program log: AnchorError ';
var PROGRAM_DATA = 'Program data: ';
var PROGRAM_ERROR = 'Program log: Error: ';
var PROGRAM_LOG = 'Program log: ';
var PROGRAM_PANIC = 'Program log: panicked at';
var LogMessageProcessor = /** @class */ (function () {
    function LogMessageProcessor() {
    }
    LogMessageProcessor.processLogs = function (messages) {
        var e_1, _a;
        var results = [];
        var currentResult;
        var processingLevel = -1;
        var processingResults = [];
        try {
            for (var messages_1 = __values(messages), messages_1_1 = messages_1.next(); !messages_1_1.done; messages_1_1 = messages_1.next()) {
                var message = messages_1_1.value;
                var _b = __read(categorizeLog(message), 2), category = _b[0], content = _b[1];
                if (category == interfaces_1.ProgramLogCategory.ProgramStart || category == interfaces_1.ProgramLogCategory.CpiCall) {
                    processingLevel++;
                    currentResult = {
                        publicKey: new web3_js_1.PublicKey(content),
                        messages: [],
                        datas: [],
                        isSuccess: true,
                        return: null,
                        errorCode: null,
                        errorMessage: null,
                        children: [],
                    };
                    processingResults.push(currentResult);
                }
                currentResult.messages.push([category, content]);
                if (category == interfaces_1.ProgramLogCategory.ProgramData) {
                    currentResult.datas.push(content);
                }
                if (category == interfaces_1.ProgramLogCategory.ProgramReturn) {
                    currentResult.return = content;
                }
                if (category == interfaces_1.ProgramLogCategory.ProgramError) {
                    currentResult.errorMessage = content;
                }
                if (category == interfaces_1.ProgramLogCategory.ProgramSuccess || category == interfaces_1.ProgramLogCategory.ProgramFailed) {
                    if (currentResult.children.length === 0) {
                        currentResult.isSuccess = category == interfaces_1.ProgramLogCategory.ProgramSuccess;
                    }
                    else {
                        currentResult.isSuccess = currentResult.children.every(function (child) { return child.isSuccess; });
                    }
                    if (category == interfaces_1.ProgramLogCategory.ProgramFailed) {
                        var errorCodeHex = content.split('|')[1];
                        var errorCodeDec = parseInt(errorCodeHex, 16);
                        currentResult.errorCode = "".concat(errorCodeHex, "|").concat(errorCodeDec);
                    }
                    processingLevel--;
                    if (processingLevel === -1) {
                        results.push(currentResult);
                        currentResult = null;
                    }
                    else {
                        var parentResult = processingResults[processingLevel];
                        parentResult.children.push(currentResult);
                        currentResult = parentResult;
                    }
                    processingResults.pop();
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (messages_1_1 && !messages_1_1.done && (_a = messages_1.return)) _a.call(messages_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return results;
    };
    return LogMessageProcessor;
}());
exports.LogMessageProcessor = LogMessageProcessor;
function categorizeLog(message) {
    var match1 = message.match(/^Program (.*) invoke \[(\d+)\]/);
    if (match1 !== null && match1.at(2).toString() == '1') {
        return [interfaces_1.ProgramLogCategory.ProgramStart, match1.at(1)];
    }
    if (match1 !== null && match1.at(2) != '1') {
        return [interfaces_1.ProgramLogCategory.CpiCall, match1.at(1)];
    }
    // This is a `msg!` log
    if (message.startsWith(PROGRAM_LOG)) {
        if (message.startsWith(PROGRAM_ERROR)) {
            return [interfaces_1.ProgramLogCategory.ProgramError, "Reason: ".concat(message.slice(PROGRAM_ERROR.length))];
        }
        else if (message.startsWith(ANCHOR_PROGRAM_ERROR)) {
            return [interfaces_1.ProgramLogCategory.ProgramError, "Reason: ".concat(message.slice(PROGRAM_LOG.length))];
        }
        else if (message.startsWith(PROGRAM_PANIC)) {
            return [interfaces_1.ProgramLogCategory.ProgramError, "Reason: ".concat(message.slice(PROGRAM_LOG.length))];
        }
        else {
            return [interfaces_1.ProgramLogCategory.ProgramMessage, message.slice(PROGRAM_LOG.length)];
        }
    }
    // This is a `sol_log_data` log
    if (message.startsWith(PROGRAM_DATA)) {
        return [interfaces_1.ProgramLogCategory.ProgramData, message.slice(PROGRAM_DATA.length)];
    }
    var match2 = message.match(/^Program return: (.*) (.*)/);
    if (match2 !== null) {
        return [interfaces_1.ProgramLogCategory.ProgramReturn, match2.at(2)];
    }
    var match3 = message.match(/^Program (.*) success/);
    if (match3 !== null) {
        return [interfaces_1.ProgramLogCategory.ProgramSuccess, match3.at(1)];
    }
    var match4 = message.match(/Program (.*) failed: custom program error: (.*)/);
    if (match4 !== null) {
        return [interfaces_1.ProgramLogCategory.ProgramFailed, "".concat(match4.at(1), "|").concat(match4.at(2))];
    }
    var match5 = message.match(/Program (.*) failed: Program failed to complete/);
    if (match5 !== null) {
        return [interfaces_1.ProgramLogCategory.ProgramFailed, "".concat(match5.at(1), "|0x0")];
    }
    return [interfaces_1.ProgramLogCategory.Others, message];
}
