"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.distinctSigners = exports.sendTransaction2 = exports.sendTransaction = exports.sendRawTransaction2 = exports.sendRawTransaction = exports.getProgramReturn = exports.DEFAULT_PUBKEY = void 0;
var web3_js_1 = require("@solana/web3.js");
var solana_service_1 = require("./solana.service");
exports.DEFAULT_PUBKEY = new web3_js_1.PublicKey('11111111111111111111111111111111');
function getProgramReturn(connection, txHash) {
    return __awaiter(this, void 0, void 0, function () {
        var txInfo, logMessages, logMessages_1, logMessages_1_1, message, base64Value;
        var e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, connection.getTransaction(txHash)];
                case 1:
                    txInfo = _b.sent();
                    logMessages = txInfo.meta.logMessages;
                    try {
                        for (logMessages_1 = __values(logMessages), logMessages_1_1 = logMessages_1.next(); !logMessages_1_1.done; logMessages_1_1 = logMessages_1.next()) {
                            message = logMessages_1_1.value;
                            if (message.startsWith('Program return: ')) {
                                base64Value = message.slice(61);
                                return [2 /*return*/, Buffer.from(base64Value, 'base64').toString('hex')];
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (logMessages_1_1 && !logMessages_1_1.done && (_a = logMessages_1.return)) _a.call(logMessages_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    return [2 /*return*/, null];
            }
        });
    });
}
exports.getProgramReturn = getProgramReturn;
function sendRawTransaction(connection, rawTransaction, signatures, options) {
    return __awaiter(this, void 0, void 0, function () {
        var transaction, signatures_1, signatures_1_1, signature, err_1, txLog, _a;
        var e_2, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    transaction = web3_js_1.Transaction.from(rawTransaction);
                    try {
                        for (signatures_1 = __values(signatures), signatures_1_1 = signatures_1.next(); !signatures_1_1.done; signatures_1_1 = signatures_1.next()) {
                            signature = signatures_1_1.value;
                            transaction.addSignature(signature.publicKey, signature.signature);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (signatures_1_1 && !signatures_1_1.done && (_b = signatures_1.return)) _b.call(signatures_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 8]);
                    return [4 /*yield*/, (0, web3_js_1.sendAndConfirmRawTransaction)(connection, transaction.serialize(), options)];
                case 2: return [2 /*return*/, _c.sent()];
                case 3:
                    err_1 = _c.sent();
                    console.info(err_1.toString());
                    _c.label = 4;
                case 4:
                    _c.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, handleRpcError(connection, err_1)];
                case 5:
                    txLog = _c.sent();
                    if (txLog && txLog.errorMessage) {
                        console.info(txLog.errorMessage);
                    }
                    return [3 /*break*/, 7];
                case 6:
                    _a = _c.sent();
                    return [3 /*break*/, 7];
                case 7:
                    ;
                    return [2 /*return*/, null];
                case 8: return [2 /*return*/];
            }
        });
    });
}
exports.sendRawTransaction = sendRawTransaction;
function sendRawTransaction2(connection, rawTransaction, signatures, options) {
    return __awaiter(this, void 0, void 0, function () {
        var transaction, signatures_2, signatures_2_1, signature, txSign, err_2, txLog;
        var e_3, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    transaction = web3_js_1.Transaction.from(rawTransaction);
                    try {
                        for (signatures_2 = __values(signatures), signatures_2_1 = signatures_2.next(); !signatures_2_1.done; signatures_2_1 = signatures_2.next()) {
                            signature = signatures_2_1.value;
                            transaction.addSignature(signature.publicKey, signature.signature);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (signatures_2_1 && !signatures_2_1.done && (_a = signatures_2.return)) _a.call(signatures_2);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 5]);
                    return [4 /*yield*/, (0, web3_js_1.sendAndConfirmRawTransaction)(connection, transaction.serialize(), options)];
                case 2:
                    txSign = _b.sent();
                    return [2 /*return*/, [txSign, null]];
                case 3:
                    err_2 = _b.sent();
                    return [4 /*yield*/, handleRpcError(connection, err_2)];
                case 4:
                    txLog = _b.sent();
                    return [2 /*return*/, [null, txLog]];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.sendRawTransaction2 = sendRawTransaction2;
function sendTransaction(connection, transaction, signers, options) {
    return __awaiter(this, void 0, void 0, function () {
        var txSign, err_3, txLog, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 7]);
                    return [4 /*yield*/, (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, signers, options)];
                case 1:
                    txSign = _b.sent();
                    return [2 /*return*/, txSign];
                case 2:
                    err_3 = _b.sent();
                    console.info(err_3.toString());
                    _b.label = 3;
                case 3:
                    _b.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, handleRpcError(connection, err_3)];
                case 4:
                    txLog = _b.sent();
                    if (txLog && txLog.errorMessage) {
                        console.info(txLog.errorMessage);
                    }
                    return [3 /*break*/, 6];
                case 5:
                    _a = _b.sent();
                    return [3 /*break*/, 6];
                case 6:
                    ;
                    return [2 /*return*/, null];
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.sendTransaction = sendTransaction;
function sendTransaction2(connection, transaction, signers, options) {
    return __awaiter(this, void 0, void 0, function () {
        var txSign, err_4, txLog;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 4]);
                    return [4 /*yield*/, (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, signers, options)];
                case 1:
                    txSign = _a.sent();
                    return [2 /*return*/, [txSign, null]];
                case 2:
                    err_4 = _a.sent();
                    return [4 /*yield*/, handleRpcError(connection, err_4)];
                case 3:
                    txLog = _a.sent();
                    return [2 /*return*/, [null, txLog]];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.sendTransaction2 = sendTransaction2;
function handleRpcError(connection, error) {
    return __awaiter(this, void 0, void 0, function () {
        var errorMessage, hasPreflight, extractTxSignMatch, txSign, transactionLog;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    errorMessage = error.toString();
                    hasPreflight = Object.getOwnPropertyNames(error).indexOf('logs') > -1;
                    if (hasPreflight) {
                        return [2 /*return*/, solana_service_1.SolanaService.formatLogMessages(error.logs)];
                    }
                    extractTxSignMatch = errorMessage.match(/Error: Transaction (.*) failed/);
                    if (extractTxSignMatch === null) {
                        return [2 /*return*/, null];
                    }
                    txSign = extractTxSignMatch.at(1);
                    return [4 /*yield*/, solana_service_1.SolanaService.getTransactionLogMessages(connection, txSign)];
                case 1:
                    transactionLog = _a.sent();
                    return [2 /*return*/, transactionLog];
            }
        });
    });
}
function distinctSigners(signers) {
    var e_4, _a;
    var addresses = [];
    var results = [];
    try {
        for (var signers_1 = __values(signers), signers_1_1 = signers_1.next(); !signers_1_1.done; signers_1_1 = signers_1.next()) {
            var signer = signers_1_1.value;
            var address = signer.publicKey.toBase58();
            if (addresses.indexOf(address) === -1) {
                addresses.push(signer.publicKey.toBase58());
                results.push(signer);
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (signers_1_1 && !signers_1_1.done && (_a = signers_1.return)) _a.call(signers_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return results;
}
exports.distinctSigners = distinctSigners;
