"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BorshService = void 0;
var hash_service_1 = require("./hash.service");
var BorshService = /** @class */ (function () {
    function BorshService() {
    }
    BorshService.anchorSerialize = function (method, layout, data, maxSpan) {
        var prefix = hash_service_1.HashService.sha256("global:".concat(method));
        var truncatedPrefix = prefix.slice(0, 8);
        var buffer = Buffer.alloc(maxSpan);
        var span = layout.encode(data, buffer);
        return Buffer.from(__spreadArray(__spreadArray([], __read(truncatedPrefix), false), __read(buffer.slice(0, span)), false));
    };
    BorshService.anchorDeserialize = function (layout, data) {
        return layout.decode(data.slice(8));
    };
    BorshService.deserialize = function (layout, data) {
        return layout.decode(data);
    };
    BorshService.serialize = function (layout, data, maxSpan) {
        var buffer = Buffer.alloc(maxSpan);
        var span = layout.encode(data, buffer);
        return buffer.slice(0, span);
    };
    return BorshService;
}());
exports.BorshService = BorshService;
