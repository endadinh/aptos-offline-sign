"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorityTypes = exports.TokenProgramInstructionService = exports.INITIALIZE_MINT_SPAN = exports.INITIALIZE_ACCOUNT_SPAN = exports.TOKEN_PROGRAM_ID = exports.ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = void 0;
var borsh = __importStar(require("@project-serum/borsh"));
var web3_js_1 = require("@solana/web3.js");
var bn_js_1 = __importDefault(require("bn.js"));
var core_1 = require("./core");
exports.ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3_js_1.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
exports.TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
var CreateAssociatedTokenAccountRequest = /** @class */ (function () {
    function CreateAssociatedTokenAccountRequest() {
    }
    return CreateAssociatedTokenAccountRequest;
}());
var CREATE_ASSOCIATED_TOKEN_ACCOUNT_LAYOUT = borsh.struct([]);
var APPROVE_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
    borsh.u64('amount'),
]);
var BURN_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
    borsh.u64('amount'),
]);
var CHANGE_AUTHORITY_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
    borsh.u8('type'),
    borsh.option(borsh.publicKey(), 'authority'),
]);
var CLOSE_ACCOUNT_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
]);
exports.INITIALIZE_ACCOUNT_SPAN = 165;
var INITIALIZE_ACCOUNT_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
]);
exports.INITIALIZE_MINT_SPAN = 82;
var INITIALIZE_MINT_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
    borsh.u8('decimals'),
    borsh.publicKey('mintAuthority'),
    borsh.option(borsh.publicKey(), 'freezeAuthority')
]);
var MINT_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
    borsh.u64('amount'),
]);
var TRANSFER_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
    borsh.u64('amount'),
]);
var FREEZE_ACCOUNT_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
]);
var THAW_ACCOUNT_LAYOUT = borsh.struct([
    borsh.u8('instruction'),
]);
var TOKEN_ACCOUNT = borsh.struct([
    borsh.publicKey('mint'),
    borsh.publicKey('owner'),
    borsh.u64('amount'),
    borsh.u32('delegateOption'),
    borsh.publicKey('delegate'),
    borsh.u8('state'),
    borsh.u32('isNativeOption'),
    borsh.u64('isNative'),
    borsh.u64('delegatedAmount'),
    borsh.u32('closeAuthorityOption'),
    borsh.publicKey('closeAuthority'),
]);
var TOKEN_MINT_LAYOUT = borsh.struct([
    borsh.u32('mintAuthorityOption'),
    borsh.publicKey('mintAuthority'),
    borsh.u64('supply'),
    borsh.u8('decimals'),
    borsh.u8('isInitialized'),
    borsh.u32('freezeAuthorityOption'),
    borsh.publicKey('freezeAuthority'),
]);
var TokenProgramInstructionService = /** @class */ (function () {
    function TokenProgramInstructionService() {
    }
    TokenProgramInstructionService.approve = function (ownerAddress, ownerTokenAddress, delegateAddress, amount) {
        var request = {
            instruction: 4,
            amount: amount,
        };
        var keys = [
            { pubkey: ownerTokenAddress, isSigner: false, isWritable: true },
            { pubkey: delegateAddress, isSigner: false, isWritable: false },
            { pubkey: ownerAddress, isSigner: true, isWritable: false },
        ];
        var data = core_1.BorshService.serialize(APPROVE_LAYOUT, request, 10);
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID,
        });
    };
    TokenProgramInstructionService.burn = function (mintAddress, ownerAddress, userTokenAddress, amount) {
        var request = {
            instruction: 8,
            amount: new bn_js_1.default(amount),
        };
        var keys = [
            { pubkey: userTokenAddress, isSigner: false, isWritable: true },
            { pubkey: mintAddress, isSigner: false, isWritable: true },
            { pubkey: ownerAddress, isSigner: true, isWritable: false },
        ];
        var data = core_1.BorshService.serialize(BURN_LAYOUT, request, 10);
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID,
        });
    };
    TokenProgramInstructionService.createAssociatedTokenAccount = function (payerAddress, ownerAddress, tokenMintAddress) {
        var tokenAccountAddress = this.findAssociatedTokenAddress(ownerAddress, tokenMintAddress);
        var request = {};
        var keys = [
            { pubkey: payerAddress, isSigner: true, isWritable: true },
            { pubkey: tokenAccountAddress, isSigner: false, isWritable: true },
            { pubkey: ownerAddress, isSigner: false, isWritable: false },
            { pubkey: tokenMintAddress, isSigner: false, isWritable: false },
            { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },
            { pubkey: exports.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
            { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },
        ];
        var data = core_1.BorshService.serialize(CREATE_ASSOCIATED_TOKEN_ACCOUNT_LAYOUT, request, 10);
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,
        });
    };
    TokenProgramInstructionService.changeAuthority = function (authorityAddress, mintAddress, authorityType, newAuthorityAddress) {
        var request = {
            instruction: 6,
            type: authorityType,
            authority: newAuthorityAddress,
        };
        var keys = [
            { pubkey: mintAddress, isSigner: false, isWritable: true },
            { pubkey: authorityAddress, isSigner: true, isWritable: false },
        ];
        var data = core_1.BorshService.serialize(CHANGE_AUTHORITY_LAYOUT, request, 100);
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID,
        });
    };
    TokenProgramInstructionService.closeAccount = function (ownerAddress, tokenAddressToClose) {
        var request = {
            instruction: 9,
        };
        var keys = [
            { pubkey: tokenAddressToClose, isSigner: false, isWritable: true },
            { pubkey: ownerAddress, isSigner: false, isWritable: true },
            { pubkey: ownerAddress, isSigner: true, isWritable: false },
        ];
        var data = core_1.BorshService.serialize(CLOSE_ACCOUNT_LAYOUT, request, 2);
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID,
        });
    };
    TokenProgramInstructionService.initializeAccount = function (ownerAddress, tokenMintAddress, tokenAccountAddress) {
        var request = {
            instruction: 1,
        };
        var keys = [
            { pubkey: tokenAccountAddress, isSigner: false, isWritable: true },
            { pubkey: tokenMintAddress, isSigner: false, isWritable: false },
            { pubkey: ownerAddress, isSigner: false, isWritable: false },
            { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },
        ];
        var data = core_1.BorshService.serialize(INITIALIZE_ACCOUNT_LAYOUT, request, 2);
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID,
        });
    };
    TokenProgramInstructionService.initializeMint = function (tokenMintAddress, decimals, mintAuthorityAddress, freezeAuthorityAddress) {
        var request = {
            instruction: 0,
            decimals: decimals,
            mintAuthority: mintAuthorityAddress,
            freezeAuthority: freezeAuthorityAddress,
        };
        var keys = [
            { pubkey: tokenMintAddress, isSigner: false, isWritable: true },
            { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
        ];
        var data = core_1.BorshService.serialize(INITIALIZE_MINT_LAYOUT, request, 67);
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID,
        });
    };
    TokenProgramInstructionService.mint = function (authorityAddress, tokenMintAddress, targetTokenAddress, amount) {
        var request = {
            instruction: 7,
            amount: amount,
        };
        var keys = [
            { pubkey: tokenMintAddress, isSigner: false, isWritable: true },
            { pubkey: targetTokenAddress, isSigner: false, isWritable: true },
            { pubkey: authorityAddress, isSigner: true, isWritable: false },
        ];
        var data = core_1.BorshService.serialize(MINT_LAYOUT, request, 10);
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID,
        });
    };
    TokenProgramInstructionService.transfer = function (ownerAddress, sourceTokenAddress, targetTokenAddress, amount) {
        var request = {
            instruction: 3,
            amount: amount,
        };
        var keys = [
            { pubkey: sourceTokenAddress, isSigner: false, isWritable: true },
            { pubkey: targetTokenAddress, isSigner: false, isWritable: true },
            { pubkey: ownerAddress, isSigner: true, isWritable: false },
        ];
        var data = core_1.BorshService.serialize(TRANSFER_LAYOUT, request, 10);
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID,
        });
    };
    TokenProgramInstructionService.freezeAccount = function (accountAddress, mintAddress, authorityAddress) {
        var request = {
            instruction: 10
        };
        var data = core_1.BorshService.serialize(FREEZE_ACCOUNT_LAYOUT, request, 10);
        var keys = [
            { pubkey: accountAddress, isSigner: false, isWritable: true },
            { pubkey: mintAddress, isSigner: false, isWritable: false },
            { pubkey: authorityAddress, isSigner: true, isWritable: false },
        ];
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID
        });
    };
    TokenProgramInstructionService.thawAccount = function (accountAddress, mintAddress, authorityAddress) {
        var request = {
            instruction: 11
        };
        var data = core_1.BorshService.serialize(THAW_ACCOUNT_LAYOUT, request, 10);
        var keys = [
            { pubkey: accountAddress, isSigner: false, isWritable: true },
            { pubkey: mintAddress, isSigner: false, isWritable: false },
            { pubkey: authorityAddress, isSigner: true, isWritable: false },
        ];
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: exports.TOKEN_PROGRAM_ID
        });
    };
    TokenProgramInstructionService.decodeTokenAccountInfo = function (data) {
        var decodedData = core_1.BorshService.deserialize(TOKEN_ACCOUNT, data);
        return {
            mint: decodedData.mint,
            owner: decodedData.owner,
            amount: decodedData.amount,
            delegate: decodedData.delegateOption === 0 ? null : decodedData.delegate,
            delegatedAmount: decodedData.delegateOption === 0 ? new bn_js_1.default(0) : decodedData.delegatedAmount,
            isInitialized: decodedData.state !== 0,
            isFrozen: decodedData.state === 2,
            isNative: decodedData.isNativeOption === 1,
            rentExemptReserve: decodedData.isNativeOption === 1 ? decodedData.isNative : null,
            closeAuthority: decodedData.closeAuthorityOption === 0 ? null : decodedData.closeAuthority,
        };
    };
    TokenProgramInstructionService.decodeTokenMintInfo = function (data) {
        var decodedData = core_1.BorshService.deserialize(TOKEN_MINT_LAYOUT, data);
        return {
            supply: decodedData.supply,
            decimals: decodedData.decimals,
            isInitialized: decodedData.isInitialized !== 0,
            mintAuthority: decodedData.mintAuthorityOption === 0 ? null : decodedData.mintAuthority,
            freezeAuthority: decodedData.freezeAuthorityOption === 0 ? null : decodedData.freezeAuthority,
        };
    };
    TokenProgramInstructionService.decodeTransferInstruction = function (data) {
        return core_1.BorshService.deserialize(TRANSFER_LAYOUT, data);
    };
    TokenProgramInstructionService.findAssociatedTokenAddress = function (walletAddress, tokenMintAddress) {
        var _a = __read(web3_js_1.PublicKey.findProgramAddressSync([
            walletAddress.toBuffer(),
            exports.TOKEN_PROGRAM_ID.toBuffer(),
            tokenMintAddress.toBuffer(),
        ], exports.ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID), 1), address = _a[0];
        return address;
    };
    return TokenProgramInstructionService;
}());
exports.TokenProgramInstructionService = TokenProgramInstructionService;
var AuthorityTypes = /** @class */ (function () {
    function AuthorityTypes() {
    }
    AuthorityTypes.MintTokens = 0;
    AuthorityTypes.FreezeAccount = 1;
    AuthorityTypes.AccountOwner = 2;
    AuthorityTypes.CloseAccount = 3;
    return AuthorityTypes;
}());
exports.AuthorityTypes = AuthorityTypes;
