"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519InstructionService = void 0;
var borsh = __importStar(require("@project-serum/borsh"));
var web3_js_1 = require("@solana/web3.js");
var borsh_service_1 = require("./core/borsh.service");
var ed25519_sign_service_1 = require("./core/ed25519_sign.service");
var U16_MAX = 65535;
var VERIFY_SIGNATURES_REQUEST_HEADER_LAYOUT = borsh.struct([
    borsh.u8('numSignatures'),
    borsh.u8('padding'),
]);
var VERIFY_SIGNATURES_REQUEST_HEADER_SPAN = VERIFY_SIGNATURES_REQUEST_HEADER_LAYOUT.span;
var SIGNATURE_OFFSET_LAYOUT = borsh.struct([
    borsh.u16('signatureOffset'),
    borsh.u16('signatureInstructionIndex'),
    borsh.u16('publicKeyOffset'),
    borsh.u16('publicKeyInstructionIndex'),
    borsh.u16('messageDataOffset'),
    borsh.u16('messageDataSize'),
    borsh.u16('messageInstructionIndex'),
]);
var SIGNATURE_OFFSET_SPAN = SIGNATURE_OFFSET_LAYOUT.span;
var SIGNATURE_DATA_LAYOUT = borsh.struct([
    borsh.publicKey('publicKey'),
    borsh.array(borsh.u8(), 64, 'signature'),
]);
var SIGNATURE_DATA_SPAN = SIGNATURE_DATA_LAYOUT.span;
var Ed25519InstructionService = /** @class */ (function () {
    function Ed25519InstructionService() {
    }
    Ed25519InstructionService.createMessageVerification = function (message) {
        var signatures = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            signatures[_i - 1] = arguments[_i];
        }
        var dataSpan = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
            + (SIGNATURE_OFFSET_SPAN + SIGNATURE_DATA_SPAN) * signatures.length
            + message.length;
        var data = Buffer.alloc(dataSpan);
        // Fill header
        var header = {
            numSignatures: signatures.length,
            padding: 0,
        };
        var headerBytes = borsh_service_1.BorshService.serialize(VERIFY_SIGNATURES_REQUEST_HEADER_LAYOUT, header, VERIFY_SIGNATURES_REQUEST_HEADER_SPAN);
        data.fill(headerBytes, 0, VERIFY_SIGNATURES_REQUEST_HEADER_SPAN);
        var messageOffset = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
            + (SIGNATURE_OFFSET_SPAN + SIGNATURE_DATA_SPAN) * signatures.length;
        // Fill offsets
        for (var i = 0; i < signatures.length; i++) {
            var signOffsetOffset = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
                + SIGNATURE_OFFSET_SPAN * i;
            var signDataOffset = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
                + SIGNATURE_OFFSET_SPAN * signatures.length
                + SIGNATURE_DATA_SPAN * i;
            var signOffset = {
                signatureOffset: signDataOffset + 32,
                signatureInstructionIndex: U16_MAX,
                publicKeyOffset: signDataOffset + 0,
                publicKeyInstructionIndex: U16_MAX,
                messageDataOffset: messageOffset,
                messageDataSize: message.length,
                messageInstructionIndex: U16_MAX,
            };
            var signOffsetBuffer = borsh_service_1.BorshService.serialize(SIGNATURE_OFFSET_LAYOUT, signOffset, SIGNATURE_OFFSET_SPAN);
            data.fill(signOffsetBuffer, signOffsetOffset, signOffsetOffset + SIGNATURE_OFFSET_SPAN);
        }
        // Fill signatures
        for (var i = 0; i < signatures.length; i++) {
            var signatureTuple = signatures[i];
            var signData = {
                publicKey: signatureTuple.publicKey,
                signature: signatureTuple.signature,
            };
            var signDataOffset = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
                + SIGNATURE_OFFSET_SPAN * signatures.length
                + SIGNATURE_DATA_SPAN * i;
            var signDataBuffer = borsh_service_1.BorshService.serialize(SIGNATURE_DATA_LAYOUT, signData, SIGNATURE_DATA_SPAN);
            data.fill(signDataBuffer, signDataOffset, signDataOffset + SIGNATURE_DATA_SPAN);
        }
        // Fill messages
        data.fill(message, messageOffset, messageOffset + message.length);
        var keys = [];
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: web3_js_1.Ed25519Program.programId,
        });
    };
    Ed25519InstructionService.createMessagesVerification = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var totalMessageLength = params.reduce(function (sum, x) { return sum + x.message.length; }, 0);
        var dataSpan = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
            + (SIGNATURE_OFFSET_SPAN + SIGNATURE_DATA_SPAN) * params.length
            + totalMessageLength;
        var data = Buffer.alloc(dataSpan);
        // Fill header
        var header = {
            numSignatures: params.length,
            padding: 0,
        };
        var headerBytes = borsh_service_1.BorshService.serialize(VERIFY_SIGNATURES_REQUEST_HEADER_LAYOUT, header, VERIFY_SIGNATURES_REQUEST_HEADER_SPAN);
        data.fill(headerBytes, 0, VERIFY_SIGNATURES_REQUEST_HEADER_SPAN);
        var messageOffset = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
            + (SIGNATURE_OFFSET_SPAN + SIGNATURE_DATA_SPAN) * params.length;
        var messageOffsets = [];
        for (var i = 0; i < params.length; i++) {
            if (i == 0) {
                messageOffsets.push(messageOffset);
            }
            else {
                var previousParam = params[i - 1];
                messageOffsets.push(messageOffsets[i - 1] + previousParam.message.length);
            }
        }
        // Fill offsets
        for (var i = 0; i < params.length; i++) {
            var param = params[i];
            var signOffsetOffset = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
                + SIGNATURE_OFFSET_SPAN * i;
            var signDataOffset = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
                + SIGNATURE_OFFSET_SPAN * params.length
                + SIGNATURE_DATA_SPAN * i;
            var signOffset = {
                signatureOffset: signDataOffset + 32,
                signatureInstructionIndex: U16_MAX,
                publicKeyOffset: signDataOffset + 0,
                publicKeyInstructionIndex: U16_MAX,
                messageDataOffset: messageOffsets[i],
                messageDataSize: param.message.length,
                messageInstructionIndex: U16_MAX,
            };
            var signOffsetBuffer = borsh_service_1.BorshService.serialize(SIGNATURE_OFFSET_LAYOUT, signOffset, SIGNATURE_OFFSET_SPAN);
            data.fill(signOffsetBuffer, signOffsetOffset, signOffsetOffset + SIGNATURE_OFFSET_SPAN);
        }
        // Fill signatures
        for (var i = 0; i < params.length; i++) {
            var signatureTuple = params[i];
            var signData = {
                publicKey: signatureTuple.publicKey,
                signature: signatureTuple.signature,
            };
            var signDataOffset = VERIFY_SIGNATURES_REQUEST_HEADER_SPAN
                + SIGNATURE_OFFSET_SPAN * params.length
                + SIGNATURE_DATA_SPAN * i;
            var signDataBuffer = borsh_service_1.BorshService.serialize(SIGNATURE_DATA_LAYOUT, signData, SIGNATURE_DATA_SPAN);
            data.fill(signDataBuffer, signDataOffset, signDataOffset + SIGNATURE_DATA_SPAN);
        }
        // Fill messages
        for (var i = 0; i < params.length; i++) {
            var param = params[i];
            data.fill(param.message, messageOffsets[i], messageOffsets[i] + param.message.length);
        }
        var keys = [];
        return new web3_js_1.TransactionInstruction({
            keys: keys,
            data: data,
            programId: web3_js_1.Ed25519Program.programId,
        });
    };
    Ed25519InstructionService.signAndCreateMessageVerification = function (message) {
        var signers = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            signers[_i - 1] = arguments[_i];
        }
        var signatures = signers.map(function (signer) {
            var signature = ed25519_sign_service_1.Ed25519SignService.signMessage(message, Buffer.from(signer.secretKey));
            return {
                publicKey: signer.publicKey,
                signature: signature,
            };
        });
        return this.createMessageVerification.apply(this, __spreadArray([message], __read(signatures), false));
    };
    Ed25519InstructionService.signAndCreateMessagesVerification = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var verifyParams = params.map(function (param) {
            var signature = ed25519_sign_service_1.Ed25519SignService.signMessage(param.message, Buffer.from(param.signer.secretKey));
            return {
                message: param.message,
                publicKey: param.signer.publicKey,
                signature: signature,
            };
        });
        return this.createMessagesVerification.apply(this, __spreadArray([], __read(verifyParams), false));
    };
    return Ed25519InstructionService;
}());
exports.Ed25519InstructionService = Ed25519InstructionService;
