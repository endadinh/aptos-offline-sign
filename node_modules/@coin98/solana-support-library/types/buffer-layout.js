"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAlloc = exports.lockup = exports.authorized = exports.rustString = exports.uint64 = exports.publicKey = exports.union = exports.Union = exports.nu64 = exports.u32 = exports.u16 = exports.u8 = exports.struct = exports.seq = exports.offset = exports.ns64 = exports.ns32 = exports.greedy = exports.blob = void 0;
// @ts-nocheck
var BufferLayout = __importStar(require("buffer-layout"));
var buffer_layout_1 = require("buffer-layout");
Object.defineProperty(exports, "blob", { enumerable: true, get: function () { return buffer_layout_1.blob; } });
Object.defineProperty(exports, "greedy", { enumerable: true, get: function () { return buffer_layout_1.greedy; } });
Object.defineProperty(exports, "ns32", { enumerable: true, get: function () { return buffer_layout_1.ns32; } });
Object.defineProperty(exports, "ns64", { enumerable: true, get: function () { return buffer_layout_1.ns64; } });
Object.defineProperty(exports, "offset", { enumerable: true, get: function () { return buffer_layout_1.offset; } });
Object.defineProperty(exports, "seq", { enumerable: true, get: function () { return buffer_layout_1.seq; } });
Object.defineProperty(exports, "struct", { enumerable: true, get: function () { return buffer_layout_1.struct; } });
Object.defineProperty(exports, "u8", { enumerable: true, get: function () { return buffer_layout_1.u8; } });
Object.defineProperty(exports, "u16", { enumerable: true, get: function () { return buffer_layout_1.u16; } });
Object.defineProperty(exports, "u32", { enumerable: true, get: function () { return buffer_layout_1.u32; } });
Object.defineProperty(exports, "nu64", { enumerable: true, get: function () { return buffer_layout_1.nu64; } });
Object.defineProperty(exports, "Union", { enumerable: true, get: function () { return buffer_layout_1.Union; } });
Object.defineProperty(exports, "union", { enumerable: true, get: function () { return buffer_layout_1.union; } });
/**
 * Layout for a public key
 */
var publicKey = function (property) {
    if (property === void 0) { property = 'publicKey'; }
    return BufferLayout.blob(32, property);
};
exports.publicKey = publicKey;
/**
 * Layout for a 64bit unsigned value
 */
var uint64 = function (property) {
    if (property === void 0) { property = 'uint64'; }
    return BufferLayout.blob(8, property);
};
exports.uint64 = uint64;
/**
 * Layout for a Rust String type
 */
var rustString = function (property) {
    if (property === void 0) { property = 'string'; }
    var rsl = BufferLayout.struct([
        BufferLayout.u32('length'),
        BufferLayout.u32('lengthPadding'),
        BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),
    ], property);
    var _decode = rsl.decode.bind(rsl);
    var _encode = rsl.encode.bind(rsl);
    rsl.decode = function (buffer, offset) {
        var data = _decode(buffer, offset);
        return data.chars.toString('utf8');
    };
    rsl.encode = function (str, buffer, offset) {
        var data = {
            chars: Buffer.from(str, 'utf8'),
        };
        return _encode(data, buffer, offset);
    };
    rsl.alloc = function (str) {
        return (BufferLayout.u32().span +
            BufferLayout.u32().span +
            Buffer.from(str, 'utf8').length);
    };
    return rsl;
};
exports.rustString = rustString;
/**
 * Layout for an Authorized object
 */
var authorized = function (property) {
    if (property === void 0) { property = 'authorized'; }
    return BufferLayout.struct([(0, exports.publicKey)('staker'), (0, exports.publicKey)('withdrawer')], property);
};
exports.authorized = authorized;
/**
 * Layout for a Lockup object
 */
var lockup = function (property) {
    if (property === void 0) { property = 'lockup'; }
    return BufferLayout.struct([
        BufferLayout.ns64('unixTimestamp'),
        BufferLayout.ns64('epoch'),
        (0, exports.publicKey)('custodian'),
    ], property);
};
exports.lockup = lockup;
function getAlloc(type, fields) {
    var alloc = 0;
    type.layout.fields.forEach(function (item) {
        if (item.span >= 0) {
            alloc += item.span;
        }
        else if (typeof item.alloc === 'function') {
            alloc += item.alloc(fields[item.property]);
        }
    });
    return alloc;
}
exports.getAlloc = getAlloc;
