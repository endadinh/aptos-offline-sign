/// <reference types="node" />
import { PublicKey, TransactionInstruction } from '@solana/web3.js';
import BN from 'bn.js';
export declare const ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey;
export declare const TOKEN_PROGRAM_ID: PublicKey;
export declare const INITIALIZE_ACCOUNT_SPAN = 165;
export declare const INITIALIZE_MINT_SPAN = 82;
export interface TransferRequest {
    instruction: number;
    amount: BN;
}
export interface TokenAccountInfo {
    address: PublicKey;
    mint: PublicKey;
    owner: PublicKey;
    amount: BN;
    decimals: number;
    delegate: null | PublicKey;
    delegatedAmount: BN;
    isInitialized: boolean;
    isFrozen: boolean;
    isNative: boolean;
    rentExemptReserve: null | BN;
    closeAuthority: null | PublicKey;
}
export interface TokenMintInfo {
    address: PublicKey;
    supply: BN;
    decimals: number;
    isInitialized: boolean;
    mintAuthority: null | PublicKey;
    freezeAuthority: null | PublicKey;
}
export declare class TokenProgramInstructionService {
    static approve(ownerAddress: PublicKey, ownerTokenAddress: PublicKey, delegateAddress: PublicKey, amount: BN): TransactionInstruction;
    static burn(mintAddress: PublicKey, ownerAddress: PublicKey, userTokenAddress: PublicKey, amount: number): TransactionInstruction;
    static createAssociatedTokenAccount(payerAddress: PublicKey, ownerAddress: PublicKey, tokenMintAddress: PublicKey): TransactionInstruction;
    static changeAuthority(authorityAddress: PublicKey, mintAddress: PublicKey, authorityType: number, newAuthorityAddress: PublicKey | null): TransactionInstruction;
    static closeAccount(ownerAddress: PublicKey, tokenAddressToClose: PublicKey): TransactionInstruction;
    static initializeAccount(ownerAddress: PublicKey, tokenMintAddress: PublicKey, tokenAccountAddress: PublicKey): TransactionInstruction;
    static initializeMint(tokenMintAddress: PublicKey, decimals: number, mintAuthorityAddress: PublicKey, freezeAuthorityAddress: PublicKey | null): TransactionInstruction;
    static mint(authorityAddress: PublicKey, tokenMintAddress: PublicKey, targetTokenAddress: PublicKey, amount: BN): TransactionInstruction;
    static transfer(ownerAddress: PublicKey, sourceTokenAddress: PublicKey, targetTokenAddress: PublicKey, amount: BN): TransactionInstruction;
    static freezeAccount(accountAddress: PublicKey, mintAddress: PublicKey, authorityAddress: PublicKey): TransactionInstruction;
    static thawAccount(accountAddress: PublicKey, mintAddress: PublicKey, authorityAddress: PublicKey): TransactionInstruction;
    static decodeTokenAccountInfo(data: Buffer): TokenAccountInfo;
    static decodeTokenMintInfo(data: Buffer): TokenMintInfo;
    static decodeTransferInstruction(data: Buffer): TransferRequest;
    static findAssociatedTokenAddress(walletAddress: PublicKey, tokenMintAddress: PublicKey): PublicKey;
}
export declare class AuthorityTypes {
    static MintTokens: number;
    static FreezeAccount: number;
    static AccountOwner: number;
    static CloseAccount: number;
}
