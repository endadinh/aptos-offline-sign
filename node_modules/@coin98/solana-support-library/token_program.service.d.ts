import { Connection, Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';
import BN from 'bn.js';
import { TokenAccountInfo, TokenMintInfo } from './token_program_instruction.service';
export declare class TokenProgramService {
    static approve(connection: Connection, payerAccount: Keypair, ownerAccount: Keypair, userTokenAddress: PublicKey, delegateAddress: PublicKey, amount: BN): Promise<boolean>;
    static checkAddressType(connection: Connection, address: PublicKey): Promise<number>;
    static changeAuthority(connection: Connection, payerAccount: Keypair, authorityAccount: Keypair, mintAddress: PublicKey, authorityType: number, newAuthorityAddress: PublicKey | null): Promise<boolean>;
    static createTokenAccount(connection: Connection, payerAccount: Keypair, tokenAccount: Keypair, ownerAddress: PublicKey, tokenMintAddress: PublicKey): Promise<Keypair>;
    static createTokenMint(connection: Connection, payerAccount: Keypair, tokenMintAccount: Keypair, decimals: number, mintAuthorityAddress: PublicKey, freezeAuthorityAddress: PublicKey | null): Promise<Keypair>;
    static createNonFungibleTokenMint(connection: Connection, payerAccount: Keypair, tokenMintAccount: Keypair, initialOwnerAddress: PublicKey): Promise<Keypair>;
    static createAssociatedTokenAccount(connection: Connection, payerAccount: Keypair, ownerAddress: PublicKey, tokenMintAddress: PublicKey): Promise<PublicKey>;
    static createAssociatedTokenAccountIfNotExists(connection: Connection, payerAccount: Keypair, ownerAddress: PublicKey, tokenMintAddress: PublicKey): Promise<PublicKey>;
    static findAssociatedTokenAddress(walletAddress: PublicKey, tokenMintAddress: PublicKey): PublicKey;
    static findRecipientTokenAddress(connection: Connection, payerAddress: PublicKey, recipientAddress: PublicKey, tokenMintAddress: PublicKey): Promise<[PublicKey, TransactionInstruction]>;
    static getTokenAccountInfo(connection: Connection, address: PublicKey): Promise<TokenAccountInfo>;
    static getTokenMintInfo(connection: Connection, address: PublicKey): Promise<TokenMintInfo>;
    static migrateSplTokenAccounts(connection: Connection, payerAccount: Keypair, userAccount: Keypair): Promise<boolean>;
    static mint(connection: Connection, payerAccount: Keypair, authorityAccount: Keypair, tokenMintAddress: PublicKey, recipientAddress: PublicKey, amount: BN): Promise<boolean>;
    static transfer(connection: Connection, payerAccount: Keypair, ownerAccount: Keypair, userTokenAddress: PublicKey, recipientAddress: PublicKey, amount: BN): Promise<boolean>;
    static freezeAccount(connection: Connection, authorityAccount: Keypair, accountAddress: PublicKey, mintAddress: PublicKey): Promise<boolean>;
    static thawAccount(connection: Connection, payerAccount: Keypair, authorityAccount: Keypair, accountAddress: PublicKey, mintAddress: PublicKey): Promise<boolean>;
}
